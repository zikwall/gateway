// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: another.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnotherClient is the client API for Another service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnotherClient interface {
	HandlerOne(ctx context.Context, in *HandlerOneRequest, opts ...grpc.CallOption) (*HandlerOneResponse, error)
	HandlerTwo(ctx context.Context, in *HandlerTwoRequest, opts ...grpc.CallOption) (*HandlerTwoResponse, error)
}

type anotherClient struct {
	cc grpc.ClientConnInterface
}

func NewAnotherClient(cc grpc.ClientConnInterface) AnotherClient {
	return &anotherClient{cc}
}

func (c *anotherClient) HandlerOne(ctx context.Context, in *HandlerOneRequest, opts ...grpc.CallOption) (*HandlerOneResponse, error) {
	out := new(HandlerOneResponse)
	err := c.cc.Invoke(ctx, "/Another.V1.Another/HandlerOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anotherClient) HandlerTwo(ctx context.Context, in *HandlerTwoRequest, opts ...grpc.CallOption) (*HandlerTwoResponse, error) {
	out := new(HandlerTwoResponse)
	err := c.cc.Invoke(ctx, "/Another.V1.Another/HandlerTwo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnotherServer is the server API for Another service.
// All implementations must embed UnimplementedAnotherServer
// for forward compatibility
type AnotherServer interface {
	HandlerOne(context.Context, *HandlerOneRequest) (*HandlerOneResponse, error)
	HandlerTwo(context.Context, *HandlerTwoRequest) (*HandlerTwoResponse, error)
	mustEmbedUnimplementedAnotherServer()
}

// UnimplementedAnotherServer must be embedded to have forward compatible implementations.
type UnimplementedAnotherServer struct {
}

func (UnimplementedAnotherServer) HandlerOne(context.Context, *HandlerOneRequest) (*HandlerOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerOne not implemented")
}
func (UnimplementedAnotherServer) HandlerTwo(context.Context, *HandlerTwoRequest) (*HandlerTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerTwo not implemented")
}
func (UnimplementedAnotherServer) mustEmbedUnimplementedAnotherServer() {}

// UnsafeAnotherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnotherServer will
// result in compilation errors.
type UnsafeAnotherServer interface {
	mustEmbedUnimplementedAnotherServer()
}

func RegisterAnotherServer(s grpc.ServiceRegistrar, srv AnotherServer) {
	s.RegisterService(&Another_ServiceDesc, srv)
}

func _Another_HandlerOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandlerOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnotherServer).HandlerOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Another.V1.Another/HandlerOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnotherServer).HandlerOne(ctx, req.(*HandlerOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Another_HandlerTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandlerTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnotherServer).HandlerTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Another.V1.Another/HandlerTwo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnotherServer).HandlerTwo(ctx, req.(*HandlerTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Another_ServiceDesc is the grpc.ServiceDesc for Another service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Another_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Another.V1.Another",
	HandlerType: (*AnotherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandlerOne",
			Handler:    _Another_HandlerOne_Handler,
		},
		{
			MethodName: "HandlerTwo",
			Handler:    _Another_HandlerTwo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "another.proto",
}
